import os
from dotenv import load_dotenv
from datetime import datetime
from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.credentials import Credentials

# Load environment variables
load_dotenv()

# Get credentials from .env
API_KEY = os.getenv("IBM_API_KEY")
REGION = os.getenv("REGION")
MODEL_ID = os.getenv("MODEL_ID")
PROJECT_ID = os.getenv("PROJECT_ID")

# Check for missing environment variables
if not all([API_KEY, REGION, MODEL_ID, PROJECT_ID]):
    raise ValueError("‚ùå Missing one or more required environment variables.")

# Set up IBM Watsonx credentials and model
creds = Credentials(api_key=API_KEY, url=f"https://{REGION}.ml.cloud.ibm.com")
model = ModelInference(model_id=MODEL_ID, credentials=creds, project_id=PROJECT_ID)

# Get user input
idea = input("üí° Describe your startup idea: ")

# Section headers tailored to your RAG-based startup assistant
sections = [
    "Executive Summary",
    "Problem Statement",
    "Solution Overview",
    "Unique Value Proposition",
    "Target Market",
    "Business Model",
    "Go-to-Market Strategy",
    "Market Opportunity",
    "Revenue Streams",
    "Competitor Analysis",
    "Funding and Budget",
    "Legal & Compliance",
    "Government Schemes & Incubators",
    "Risks and Mitigation",
    "KPIs & Success Metrics",
    "Future Roadmap"
]

# Output file path
output_file = "output.txt"

# Write header
with open(output_file, "w", encoding="utf-8") as f:
    f.write("üì¶ Startup Blueprint Generated by: VentureCraft AI ‚Äì RAG-Powered Startup Agent\n\n")
    f.write("üí° Description: A RAG-powered intelligent agent that transforms raw startup ideas into "
            "structured, investor-ready business blueprints. It retrieves data from startup portals, "
            "incubator databases, and government policy documents to support market research, funding, "
            "legal guidance, and competitor analysis. Powered by IBM Watsonx Granite foundation models.\n\n")
    f.write(f"üïí Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    f.write("=" * 60 + "\n")

# Generate each section
for section in sections:
    prompt = (
        f"Generate the '{section}' section of a startup business plan based on this idea: {idea}. "
        "Use relevant data where applicable as if retrieved from real startup portals or government documents."
    )
    try:
        response = model.generate_text(prompt)
        with open(output_file, "a", encoding="utf-8") as f:
            f.write(f"\n\nüîπ {section}:\n{response.strip()}\n")
            f.write("-" * 50 + "\n")
        print(f"‚úÖ {section} written.")
    except Exception as e:
        print(f"‚ùå Error in {section}: {e}")

print(f"\n‚úÖ Blueprint saved to '{output_file}' successfully.")
